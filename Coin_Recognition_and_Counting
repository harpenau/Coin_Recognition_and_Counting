# Run in Google Colaboratory using Python 2
# tutorial derived from https://www.pyimagesearch.com/2015/11/02/watershed-opencv/
# currently does not work, this is a revision behind the working one

# packages necessary for importing file
from google.colab import drive
from matplotlib import pyplot as plt

# packages necessary for modifying photo
from skimage.feature import peak_local_max
from skimage.morphology import watershed
from scipy import ndimage
import cv2
import numpy as np

# import to view images easier
plt.rcParams["axes.grid"] = False

drive.mount('/content/drive')

img = cv2.imread('/content/drive/My Drive/CySLI stuff/CySLI/CySLI 2018-2019/Outreach/Programming tutorial/cv_tutorial_coins.jpg')
# img = cv2.imread('/content/drive/My Drive/CySLI stuff/CySLI/CySLI 2018-2019/Outreach/Programming tutorial/coinsWithPennies.png')
# img = cv2.imread('/content/drive/My Drive/CySLI stuff/CySLI/CySLI 2018-2019/Outreach/Programming tutorial/overlappingCoins.png')

img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
image = img.copy()

plt.imshow(img)

shifted = cv2.pyrMeanShiftFiltering(img, 31, 57)
plt.imshow(shifted)

gray = cv2.cvtColor(shifted, cv2.COLOR_BGR2GRAY)
thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
plt.imshow(thresh)
# compute the exact euclidean distance from every binary pixel to the nearest zero pixel, then find peaks in this distance map
D = ndimage.distance_transform_edt(thresh.copy())
plt.imshow(D)
localMax = peak_local_max(D, indices = False, min_distance = 10, labels = thresh)

# perform a connected component analysis on the local peaks, using 8-connectivity, then apply the Watershed algorithm
markers = ndimage.label(localMax, structure = np.ones((3,3)))[0]
labels = watershed(-D, markers, mask = thresh)
uniqueLabels = len(np.unique(labels))-1
print("[INFO] {} unique segments found".format(uniqueLabels))
#print(len(labels))

radii = [0]*uniqueLabels
xcoord = [0]*uniqueLabels
ycoord = [0]*uniqueLabels

# loop over the unique labels returned by the Watershed algorithm
for label in np.unique(labels):
  # if the label = 0 then it's the background so skip to the next label
  if label == 0:
    continue
    
  # otherwise, allocate memory for the label region and draw it on the mask
  mask = np.zeros(gray.shape, dtype="uint8")
  mask[labels == label] = 255
  
  # detect contours in the mask and grab the largest one
  cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2]
  c = max(cnts, key = cv2.contourArea)
  
  # draw a circle enclosing the object 
  ((x, y), r) = cv2.minEnclosingCircle(c)
  xcoord[label-1] = x
  ycoord[label-1] = y

  radii[label-1] = r
  cv2.circle(image, (int(x), int(y)), int(r), (0,255,0), 2)
  cv2.putText(image, "#{}".format(label), (int(x) -10, int(y)), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,0,255), 2)
image = cv2.cvtColor(image, cv2.COLOR_RGB2YCrCb)
plt.imshow(image)

ratio = [0]*12
totalMoney = 0
maximum = max(radii)
for i in range(len(radii)):
   
   ratio[i] = radii[i]/maximum
   print(i+1)

   # quarters
   if ratio[i] > .9:
    totalMoney += .25
   
   # nickels
   elif ratio[i] > .78 :
    totalMoney += .05
   
   # dimes and pennies
   elif ratio[i] > .65:
    plusMinus = [-1, 0, 1]
    red=green=blue=0
    for j in plusMinus:
      red += int(image[int(ycoord[i]+j), int(xcoord[i]+j), 0])
      green += int(image[int(ycoord[i]+j), int(xcoord[i]+j), 1])
      blue += int(image[int(ycoord[i]+j), int(xcoord[i]+j), 2])
    red = red / 3
    green = green / 3
    blue = blue / 3
    if green > 200:
     totalMoney += .1
    else:
     totalMoney += .01

    print(red, green, blue)
    
   else:
    print("Unknown Coin Detected, radii = {}".format(ratio[i]))

print("Your total amount is ${}".format(totalMoney))
