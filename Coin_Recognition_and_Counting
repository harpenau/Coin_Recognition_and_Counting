# Run in Google Colaboratory using Python 2
# tutorial derived from https://www.pyimagesearch.com/2015/11/02/watershed-opencv/

# this program mostly derived from: https://www.pyimagesearch.com/2015/11/02/watershed-opencv/
# packages necessary for importing file
from google.colab import drive
from matplotlib import pyplot as plt

# packages necessary for modifying photo
from skimage.feature import peak_local_max
from skimage.morphology import watershed
from scipy import ndimage
import cv2
import numpy as np

# import to view images easier
plt.rcParams["axes.grid"] = False

drive.mount('/content/drive')

# these paths will need to be changed to go to where you put the pictures
# img = cv2.imread('/content/drive/My Drive/CySLI stuff/CySLI/CySLI 2018-2019/Outreach/Programming tutorial/cv_tutorial_coins.jpg')
# img = cv2.imread('/content/drive/My Drive/CySLI stuff/CySLI/CySLI 2018-2019/Outreach/Programming tutorial/coinsWithPennies.png')
img = cv2.imread('/content/drive/My Drive/CySLI stuff/CySLI/CySLI 2018-2019/Outreach/Programming tutorial/overlappingCoins.png')

img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
image = img.copy()

plt.imshow(img)

# best explanation found at: https://stackoverflow.com/questions/4831813/image-segmentation-using-mean-shift-explained
shifted = cv2.pyrMeanShiftFiltering(img, 31, 57)
plt.imshow(shifted)

gray = cv2.cvtColor(shifted, cv2.COLOR_BGR2GRAY)
# gray = source image
# 0 is threshold value
# 255 is value to be change to if above 0
# cv2.THRESH_BINARY | cv2.THRESH_OTSU = bitwise or between the two so if either 
# one is 255 then it's 255 else, it's 0, pretty sure this means that if otsu 
# thresh is 255 then it's 255, not really a give and take
# best explanation found at: https://docs.opencv.org/3.4/d7/d4d/tutorial_py_thresholding.html
thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
plt.imshow(thresh)

# compute the exact euclidean distance from every non zero pixel(coin/foreground/black) to the nearest zero pixel(background/white), 
distanceToBackground = ndimage.distance_transform_edt(thresh.copy())
plt.imshow(distanceToBackground)
localMax = peak_local_max(distanceToBackground, indices = False, min_distance = 10, labels = thresh)

# gives a number to each pixel, will distinguish different features so each 
# coin will have it's own number
markers = ndimage.label(localMax, structure = np.ones((3,3)))[0]

# perform a connected component analysis on the local peaks, using 8-connectivity, then apply the Watershed algorithm
# best explanation found: http://scikit-image.org/docs/dev/auto_examples/segmentation/plot_watershed.html
labels = watershed(-distanceToBackground, markers, mask = thresh)
plt.imshow(labels)

# first label is background
uniqueLabels = len(np.unique(labels))-1
print("[INFO] {} unique segments found".format(uniqueLabels))

# initialize some arrays
radii = [0]*uniqueLabels
xcoord = [0]*uniqueLabels
ycoord = [0]*uniqueLabels

# loop over the unique labels returned by the Watershed algorithm
for label in np.unique(labels):
  # if the label = 0 then it's the background so skip to the next label
  if label == 0:
    continue
  #plt.imshow(gray)  
  # otherwise, allocate memory for the label region and draw it on the mask
  mask = np.zeros(gray.shape, dtype="uint8")
  mask[labels == label] = 255
  
  # detect contours in the mask and grab the largest one
  cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2]
  c = max(cnts, key = cv2.contourArea)
  
  # draw a circle enclosing the object 
  ((x, y), r) = cv2.minEnclosingCircle(c)
  
  # save the center points and radii of all the circles
  xcoord[label-1] = x
  ycoord[label-1] = y
  radii[label-1] = r
  
  # draw circles on the RGB image
  cv2.circle(image, (int(x), int(y)), int(r), (0,255,0), 2)
  cv2.putText(image, "#{}".format(label), (int(x) -10, int(y)), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,0,255), 2)
image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)
plt.imshow(image)

# initialize some variables
ratio = [0]*12
totalMoney = 0

# find the biggest radii to get a ratio later on
maximum = max(radii)


for i in range(len(radii)):
   # compute the ratio of the current diameter compared to the biggest diameter
   ratio[i] = radii[i]/maximum
   
   # this will catch quarters
   if ratio[i] > .9:
    totalMoney += .25
   
   # This will catch nickels
   elif ratio[i] > .78 :
    totalMoney += .05
   
   # dimes and pennies are close enough to each other that errors in the 
   # circle drawing will sometimes make dimes bigger than pennies so we need
   # a different way to distinguish them
   elif ratio[i] > .65:
    # get an average of a few points so one bad point doesn't throw it off
    plusMinus = [-1, 0, 1]
    
    # set back to zero so previous iterations don't affect this one
    saturation = 0
    
    # this will go in a diagonal direction from bottom left to top right with 
    # the center of the circle in the middle. This is taking the points from 
    # the HSV image
    for j in plusMinus:
      saturation += int(image[int(ycoord[i]+j), int(xcoord[i]+j), 1])
    
    # average the value
    saturation = saturation / 3

    # we have found from inspection, the pennies will have saturation values of 
    # greater than 120
    if saturation < 120:
     totalMoney += .1
    else:
     totalMoney += .01
   # if there was a radii that was less than .65, something is wrong.
   else:
    print("Unknown Coin Detected, radii = {}".format(ratio[i]))

# print the amount of coins in dollars
print("Your total amount is ${}".format(totalMoney))

